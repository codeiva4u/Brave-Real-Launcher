name: 🚀 Brave Real Launcher - Auto Sync & Publish

on:
  # ऑटोमेटिक अपडेट चेक - हफ्ते में दो बार (सोमवार और गुरुवार)
  schedule:
    - cron: '0 6 * * 1,4'  # सोमवार और गुरुवार सुबह 6:00 UTC
    
  # मैनुअल ट्रिगर
  workflow_dispatch:
    inputs:
      sync_mode:
        description: 'Sync Mode'
        type: choice
        default: 'auto'
        options: 
          - 'auto'       # ऑटो-सिंक अगर chrome-launcher अपडेट हो
          - 'force'      # फोर्स सिंक चाहे chrome-launcher अपडेट हो या न हो
          - 'check'      # सिर्फ चेक करें, अपडेट न करें
      publish_mode:
        description: 'Publish Mode'
        type: choice
        default: 'auto'
        options:
          - 'auto'       # अगर version बदला तो publish करें
          - 'force'      # जबरदस्ती publish करें
          - 'skip'       # publish न करें
          
  # Push और PR पर भी चलाएं (बिना publish के)
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # 🚀 एक सिंगल जॉब जो सबकुछ करे
  sync-build-test-publish:
    runs-on: ubuntu-latest
    
    # सिक्योरिटी permissions
    permissions:
      contents: write  # फाइल्स मोडिफाई करने के लिए
      packages: write  # NPM publish के लिए
      
    # Environment variables
    env:
      NODE_VERSION: '18'
      DISPLAY: ':99'
      
    steps:
    # Step 1: कोड checkout
    - name: 💻 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    # Step 2: Node.js setup
    - name: 💻 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    # Step 3: Dependencies install (हमेशा करें)
    - name: 📦 Install Dependencies
      run: npm ci

    # Step 4: Chrome-launcher version check और sync
    - name: 🔄 Check Chrome-Launcher Updates
      id: sync-check
      run: |
        echo "🔍 Checking for chrome-launcher updates..."
        
        # Chrome-launcher की latest version fetch करें with error handling
        echo "🔍 Fetching chrome-launcher latest release..."
        
        # Fetch chrome-launcher version with multiple methods
        CHROME_VERSION=""
        
        # Method 1: Try GitHub API
        if command -v jq >/dev/null 2>&1; then
          CHROME_API_RESPONSE=$(curl -s "https://api.github.com/repos/GoogleChrome/chrome-launcher/releases/latest")
          if echo "$CHROME_API_RESPONSE" | jq -e '.tag_name' >/dev/null 2>&1; then
            CHROME_VERSION=$(echo "$CHROME_API_RESPONSE" | jq -r .tag_name | sed 's/v//')
            echo "✅ Found chrome-launcher version via GitHub API: $CHROME_VERSION"
          fi
        fi
        
        # Method 2: Fallback to NPM registry
        if [ -z "$CHROME_VERSION" ] || [ "$CHROME_VERSION" = "null" ]; then
          echo "⚠️ GitHub API failed, trying NPM registry..."
          CHROME_VERSION=$(curl -s "https://registry.npmjs.org/chrome-launcher/latest" | jq -r .version 2>/dev/null || echo "")
          if [ -n "$CHROME_VERSION" ] && [ "$CHROME_VERSION" != "null" ]; then
            echo "✅ Found chrome-launcher version via NPM: $CHROME_VERSION"
          fi
        fi
        
        # Method 3: Final fallback - use current version
        if [ -z "$CHROME_VERSION" ] || [ "$CHROME_VERSION" = "null" ]; then
          echo "⚠️ All methods failed, using current version as fallback"
          CHROME_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "📦 Fallback to current version: $CHROME_VERSION"
        fi
        
        CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
        
        echo "chrome_version=$CHROME_VERSION" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Sync mode determine करें
        SYNC_MODE="${{ github.event.inputs.sync_mode || 'auto' }}"
        SHOULD_SYNC="false"
        
        if [ "$SYNC_MODE" = "force" ]; then
          SHOULD_SYNC="true"
          echo "🔄 Force sync enabled"
        elif [ "$SYNC_MODE" = "auto" ] && [ "$CHROME_VERSION" != "$CURRENT_VERSION" ]; then
          SHOULD_SYNC="true"
          echo "🆕 New chrome-launcher version detected: $CHROME_VERSION (current: $CURRENT_VERSION)"
        elif [ "$SYNC_MODE" = "check" ]; then
          echo "✅ Check mode - no sync will be performed"
        else
          echo "✅ Already up to date with chrome-launcher v$CHROME_VERSION"
        fi
        
        echo "should_sync=$SHOULD_SYNC" >> $GITHUB_OUTPUT
        echo "sync_mode=$SYNC_MODE" >> $GITHUB_OUTPUT

    # Step 5: Actual sync process
    - name: 🔄 Sync with Chrome-Launcher
      if: steps.sync-check.outputs.should_sync == 'true'
      run: |
        echo "🔢 Syncing brave-real-launcher with chrome-launcher v${{ steps.sync-check.outputs.chrome_version }}"
        
        # Validate chrome version before using it
        CHROME_VER="${{ steps.sync-check.outputs.chrome_version }}"
        if [ "$CHROME_VER" = "null" ] || [ -z "$CHROME_VER" ]; then
          echo "❌ Invalid chrome version detected: $CHROME_VER"
          echo "🔄 Skipping sync due to invalid version"
          exit 0
        fi
        
        # Validate version format (should be x.y.z)
        if ! echo "$CHROME_VER" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "❌ Invalid version format: $CHROME_VER"
          echo "🔄 Skipping sync due to invalid version format"
          exit 0
        fi
        
        echo "✅ Valid chrome version: $CHROME_VER"
        
        # Package.json version को update करें
        npm version "$CHROME_VER" --no-git-tag-version
        
        # Git configuration
        git config user.name "🤖 Brave Sync Bot"
        git config user.email "action@github.com"
        
        # Changes commit करें
        git add package.json
        git commit -m "🔄 Auto-sync with chrome-launcher v${{ steps.sync-check.outputs.chrome_version }}" || echo "No changes to commit"
        
        # Push changes
        git push || echo "Nothing to push"
        
        echo "VERSION_SYNCED=true" >> $GITHUB_ENV
        echo "NEW_VERSION=${{ steps.sync-check.outputs.chrome_version }}" >> $GITHUB_ENV

    # Step 6: Build project
    - name: 🔨 Build Project
      run: |
        echo "🔨 Building brave-real-launcher..."
        npm run build
        echo "✅ Build completed successfully!"

    # Step 7: Browser setup for testing
    - name: 🦁 Setup Browser Environment
      run: |
        echo "🦁 Setting up browser environment for testing..."
        
        # Install Xvfb for headless display
        sudo apt-get update
        sudo apt-get install -y xvfb
        
        # Start Xvfb
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        
        # Try to install Brave Browser
        echo "📥 Attempting to install Brave Browser..."
        
        # Method 1: Official Brave repository
        sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg || echo "Keyring download failed"
        echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
        sudo apt-get update || echo "Apt update had issues"
        sudo apt-get install -y brave-browser || echo "Brave install from repo failed"
        
        # Method 2: Fallback to Chromium if Brave fails
        if ! command -v brave-browser &> /dev/null; then
          echo "🔄 Brave installation failed, falling back to Chromium..."
          sudo apt-get install -y chromium-browser
          sudo ln -sf /usr/bin/chromium-browser /usr/bin/brave-browser
        fi
        
        # Verify installation
        if command -v brave-browser &> /dev/null; then
          echo "✅ Browser setup completed successfully!"
          brave-browser --version || echo "Version check failed but browser exists"
        else
          echo "⚠️ Browser setup failed, tests may be limited"
        fi

    # Step 8: Run comprehensive tests
    - name: 🧪 Run All Tests
      run: |
        echo "🧪 Running comprehensive test suite..."
        
        # Set environment for testing
        export DISPLAY=:99
        export BRAVE_PATH=/usr/bin/brave-browser
        
        # Run CI tests
        echo "🔍 Running CI test suite..."
        node test-ci.cjs
        
        # Run compatibility tests
        echo "📝 Running compatibility tests..."
        npm run test:compatibility
        
        # Type checking
        echo "📝 Running TypeScript type check..."
        npm run type-check
        
        echo "✅ All tests completed successfully!"
      env:
        DISPLAY: :99
        BRAVE_PATH: /usr/bin/brave-browser

    # Step 9: Security audit
    - name: 🔍 Security Audit
      run: |
        echo "🔍 Running security audit..."
        npm audit --audit-level high || echo "⚠️ Some security issues found but continuing..."
        echo "✅ Security audit completed!"

    # Step 10: Smart Version Management & Publish Strategy
    - name: 🔢 Smart Version Management
      id: version-manager
      run: |
        echo "🔢 Smart version management starting..."
        
        # Get current status
        PUBLISH_MODE="${{ github.event.inputs.publish_mode || 'auto' }}"
        SYNC_PERFORMED="${{ steps.sync-check.outputs.should_sync }}"
        CHROME_VERSION="${{ steps.sync-check.outputs.chrome_version }}"
        
        # Current version from package.json
        CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
        
        # NPM published version
        echo "📎 Checking NPM registry..."
        NPM_VERSION=$(npm view brave-real-launcher version 2>/dev/null || echo "0.0.0")
        
        echo "=== Version Status ==="
        echo "Local version: $CURRENT_VERSION"
        echo "NPM version: $NPM_VERSION"
        echo "Chrome-launcher version: $CHROME_VERSION"
        echo "Sync performed: $SYNC_PERFORMED"
        echo "Publish mode: $PUBLISH_MODE"
        
        # Smart version determination
        NEW_VERSION=""
        SHOULD_PUBLISH="false"
        REASON=""
        
        if [ "$PUBLISH_MODE" = "skip" ]; then
          SHOULD_PUBLISH="false"
          REASON="Publish mode set to skip"
          NEW_VERSION="$CURRENT_VERSION"
        
        elif [ "$SYNC_PERFORMED" = "true" ]; then
          # Chrome-launcher sync हुआ है - use chrome version
          NEW_VERSION="$CHROME_VERSION"
          SHOULD_PUBLISH="true"
          REASON="Synced with chrome-launcher v$CHROME_VERSION"
          
          # Update package.json with chrome version
          if [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
            echo "🔄 Updating package.json to chrome-launcher version: $NEW_VERSION"
            npm version "$NEW_VERSION" --no-git-tag-version
          fi
        
        else
          # Regular update - सिर्फ main/master branch पर publish करें
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            
            if [ "$NPM_VERSION" = "0.0.0" ]; then
              # First publish
              NEW_VERSION="$CURRENT_VERSION"
              SHOULD_PUBLISH="true"
              REASON="First publish"
            else
              # Auto-increment करें अगर NPM version >= current version
              if [ "$(printf '%s\n' "$NPM_VERSION" "$CURRENT_VERSION" | sort -V | tail -n1)" = "$NPM_VERSION" ]; then
                # NPM version is same or newer, increment
                echo "🔢 Auto-incrementing patch version..."
                
                # Parse NPM version and increment
                IFS='.' read -r major minor patch <<< "$NPM_VERSION"
                NEW_PATCH=$((patch + 1))
                NEW_VERSION="${major}.${minor}.${NEW_PATCH}"
                
                echo "📈 Version increment: $NPM_VERSION → $NEW_VERSION"
                
                # Update package.json
                npm version "$NEW_VERSION" --no-git-tag-version
                
                SHOULD_PUBLISH="true"
                REASON="Auto-incremented from $NPM_VERSION to $NEW_VERSION"
              else
                # Current version is newer
                NEW_VERSION="$CURRENT_VERSION"
                SHOULD_PUBLISH="true"
                REASON="Local version newer than NPM: $CURRENT_VERSION > $NPM_VERSION"
              fi
            fi
            
          else
            # Not on main branch
            NEW_VERSION="$CURRENT_VERSION"
            SHOULD_PUBLISH="false"
            REASON="Not on main/master branch"
          fi
        fi
        
        # Force publish override
        if [ "$PUBLISH_MODE" = "force" ]; then
          if [ -z "$NEW_VERSION" ] || [ "$NEW_VERSION" = "$CURRENT_VERSION" ]; then
            # Force के लिए increment करें
            IFS='.' read -r major minor patch <<< "$([ "$NPM_VERSION" != "0.0.0" ] && echo "$NPM_VERSION" || echo "$CURRENT_VERSION")"
            NEW_PATCH=$((patch + 1))
            NEW_VERSION="${major}.${minor}.${NEW_PATCH}"
            npm version "$NEW_VERSION" --no-git-tag-version
          fi
          SHOULD_PUBLISH="true"
          REASON="Force publish requested - v$NEW_VERSION"
        fi
        
        # Commit version changes if made
        if [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
          echo "📁 Committing version change..."
          git config user.name "🤖 Brave Version Manager"
          git config user.email "action@github.com"
          git add package.json package-lock.json
          git commit -m "🔢 Version update: $CURRENT_VERSION → $NEW_VERSION" || echo "No changes to commit"
          git push || echo "Nothing to push"
        fi
        
        # Output results
        echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
        echo "reason=$REASON" >> $GITHUB_OUTPUT
        echo "final_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_changed=$([ "$NEW_VERSION" != "$CURRENT_VERSION" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
        
        echo "=== Final Decision ==="
        echo "📋 Should publish: $SHOULD_PUBLISH"
        echo "📋 Final version: $NEW_VERSION"
        echo "📋 Reason: $REASON"

    # Step 11: Publish to NPM
    - name: 🚀 Publish to NPM
      if: steps.version-manager.outputs.should_publish == 'true'
      run: |
        FINAL_VERSION="${{ steps.version-manager.outputs.final_version }}"
        echo "🚀 Publishing brave-real-launcher v$FINAL_VERSION to NPM..."
        
        # Verify we have NPM token
        if [ -z "$NPM_TOKEN" ]; then
          echo "❌ NPM_TOKEN not found! Cannot publish."
          exit 1
        fi
        
        # Publish to NPM
        npm publish --access public
        
        # Create Git tag (only if we're on main branch)
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "🏷️ Creating Git tag..."
          git config user.name "🤖 Brave Publish Bot"
          git config user.email "action@github.com"
          
          TAG_NAME="v$FINAL_VERSION"
          git tag "$TAG_NAME" || echo "Tag might already exist"
          git push origin "$TAG_NAME" || echo "Failed to push tag"
        fi
        
        echo "🎉 Successfully published brave-real-launcher v$FINAL_VERSION!"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    # Step 12: Final summary
    - name: 📊 Workflow Summary
      run: |
        echo "✅ 🎉 Workflow completed successfully!"
        echo "=================================="
        echo "📋 Execution Summary:"
        echo "• Chrome-launcher version: ${{ steps.sync-check.outputs.chrome_version }}"
        echo "• Final version: ${{ steps.version-manager.outputs.final_version }}"
        echo "• Version changed: ${{ steps.version-manager.outputs.version_changed }}"
        echo "• Sync performed: ${{ steps.sync-check.outputs.should_sync }}"
        echo "• Sync mode: ${{ steps.sync-check.outputs.sync_mode }}"
        echo "• Publish performed: ${{ steps.version-manager.outputs.should_publish }}"
        echo "• Publish reason: ${{ steps.version-manager.outputs.reason }}"
        echo "• Build: ✅ Success"
        echo "• Tests: ✅ Passed" 
        echo "• Security: ✅ Checked"
        echo "=================================="
        
        # Set workflow status
        if [ "${{ steps.version-manager.outputs.should_publish }}" = "true" ]; then
          echo "🚀 Package published successfully as v${{ steps.version-manager.outputs.final_version }}!"
        else
          echo "📦 Package ready but not published (${{ steps.version-manager.outputs.reason }})"
        fi
